#!/bin/bash
# Main orchestrator script for MySQL binlog vs Avro JSON comparison.

# --- Configuration Section ---
# Please review and update these paths and settings according to your environment.

# Directory where your locally extracted MySQL binlog files (e.g., mysql-bin.000001) are stored.
LOCAL_BINLOG_FILES_DIR="$HOME/my_mysql_binlogs" # Example: /home/user/mysql_binlogs_extracted

# Full path to the Avro data converted to JSON Lines format.
# This file should be generated by the avro_to_json.sh script.
AVRO_JSON_INPUT_FILE="avro_rows.json" # Example: /home/user/avro_data/avro_rows.json

# --- Paths to Executables ---
# Assumes this script is in the root of your toolset directory.
# And executables are either in the same directory, or in a './bin' subdirectory.
SCRIPT_DIR_COMPARATOR=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)

# Path to the go-binlogparser executable (built from go-mysql-org source)
GO_BINLOGPARSER_CMD="${SCRIPT_DIR_COMPARATOR}/go-mysql/bin/go-binlogparser" # Example: ./bin/go-binlogparser_exe

# Path to your compiled json_parser executable
JSON_PARSER_CMD="${SCRIPT_DIR_COMPARATOR}/json_parser" # Example: ./json_parser_exe

# Path to your compiled compare_timestamps executable
COMPARATOR_CMD="${SCRIPT_DIR_COMPARATOR}/compare_timestamps" # Example: ./compare_timestamps_exe

# --- Output Files ---
# Intermediate file for JSON parsed from binlogs
OUTPUT_BINLOG_METADATA="binlog_metadata.json"
# Combined log file for errors and debug output from the Go programs
DEBUG_LOG_FILE="debug_log.txt"

# --- Script Execution ---
echo "Starting MySQL Binlog Comparison Suite..."
echo "----------------------------------------"

# Exit on any command error from this point
set -e
# Treat unset variables as an error
set -u
# Pipeliine exits with the status of the last command to exit with a non-zero status
set -o pipefail

# 0. Clean up previous run's files
echo "[INFO] Removing old output files (if any): ${OUTPUT_BINLOG_METADATA}, ${DEBUG_LOG_FILE}"
rm -f "${OUTPUT_BINLOG_METADATA}" "${DEBUG_LOG_FILE}"
touch "${DEBUG_LOG_FILE}" # Create an empty debug log file to append to

# --- Pre-flight Checks ---
echo "[INFO] Performing pre-flight checks..."

# Check for executables
for cmd_path_var in GO_BINLOGPARSER_CMD JSON_PARSER_CMD COMPARATOR_CMD; do
  cmd_path=$(eval echo "\$$cmd_path_var")
  if [ ! -x "$cmd_path" ]; then
    echo "[ERROR] Prerequisite check failed: Executable $cmd_path_var not found or not executable at: $cmd_path" >&2
    echo "[ERROR] Please build the Go programs and/or adjust paths in this script." >&2
    exit 1
  fi
done
echo "[OK] All required Go executables found."

# Check for input directories/files
if [ ! -d "$LOCAL_BINLOG_FILES_DIR" ]; then
    echo "[ERROR] Prerequisite check failed: Local binlog files directory not found: '$LOCAL_BINLOG_FILES_DIR'" >&2
    exit 1
fi
if [ ! -f "$AVRO_JSON_INPUT_FILE" ]; then
    echo "[ERROR] Prerequisite check failed: Avro JSON input file not found: '$AVRO_JSON_INPUT_FILE'" >&2
    echo "[ERROR] Please ensure you have run the avro_to_json.sh script first to generate it." >&2
    exit 1
fi
echo "[OK] Input files and directories verified."
echo "----------------------------------------"


# --- Stage 1: Parse MySQL Binlog files to JSON ---
echo "[STAGE 1] Parsing MySQL binlog files from '${LOCAL_BINLOG_FILES_DIR}'..."
echo "[STAGE 1] JSON output will be appended to '${OUTPUT_BINLOG_METADATA}'."
echo "[STAGE 1] Errors/debug from this stage will be in '${DEBUG_LOG_FILE}'."

processed_binlog_count=0
# Loop through each binlog file, sorted by version/name
for binlog_file_path in $(ls -v "${LOCAL_BINLOG_FILES_DIR}"/mysql-bin.*); do
    if [ -f "$binlog_file_path" ]; then
        echo "[STAGE 1] Processing: ${binlog_file_path}..."
        # Run go-binlogparser, pipe to json_parser.
        # stdout of json_parser appends to OUTPUT_BINLOG_METADATA.
        # stderr of the entire pipeline (both go-binlogparser and json_parser) appends to DEBUG_LOG_FILE.
        ( "${GO_BINLOGPARSER_CMD}" \
            -name="${binlog_file_path}" \
            -offset 4 \
        | "${JSON_PARSER_CMD}" "${binlog_file_path}" \
        ) >> "${OUTPUT_BINLOG_METADATA}" 2>> "${DEBUG_LOG_FILE}"
        
        processed_binlog_count=$((processed_binlog_count + 1))
    else
        echo "[STAGE 1][WARN] Skipped non-file item (or no files found with pattern): ${binlog_file_path}" >> "${DEBUG_LOG_FILE}"
    fi
done

if [ "$processed_binlog_count" -eq 0 ]; then
    echo "[STAGE 1][ERROR] No binlog files were found and processed in '${LOCAL_BINLOG_FILES_DIR}'." >&2
    echo "[STAGE 1][ERROR] Please ensure your binlog files are in the specified directory and match the 'mysql-bin.*' pattern." >&2
    exit 1
fi
echo "[STAGE 1] Finished parsing ${processed_binlog_count} binlog file(s)."
echo "----------------------------------------"


# --- Stage 2: Run the Comparison ---
echo "[STAGE 2] Comparing '${OUTPUT_BINLOG_METADATA}' with '${AVRO_JSON_INPUT_FILE}'..."
echo "[STAGE 2] Errors/debug from this stage will also be in '${DEBUG_LOG_FILE}'."

if [ ! -s "${OUTPUT_BINLOG_METADATA}" ]; then
    echo "[STAGE 2][ERROR] Binlog metadata file '${OUTPUT_BINLOG_METADATA}' was not created or is empty." >&2
    echo "[STAGE 2][ERROR] Cannot run comparison. Check '${DEBUG_LOG_FILE}' for errors from Stage 1." >&2
    exit 1
fi

# Run compare_timestamps. stdout goes to console, stderr appends to DEBUG_LOG_FILE.
"${COMPARATOR_CMD}" "${OUTPUT_BINLOG_METADATA}" "${AVRO_JSON_INPUT_FILE}" 2>> "${DEBUG_LOG_FILE}"

echo "----------------------------------------"
echo "[SUCCESS] Comparison suite finished!"
echo "Review console output for summary. Check '${DEBUG_LOG_FILE}' for any detailed errors or debug messages."